import csv
import os
import tempfile


class ExploitDB_Search:
  
  """This class allows you to search exploit db for exploits on an app specified"""

  def __init__(self,search):

    self.search = search
    self.file = "files.csv"
    self.os = os.name
    self.foundList = []
    self.headerList = []
    self.width = None
    self.height = None



    #Calls to main Functions of program

    self.searchDB(search)
    self.getTerminalSize()
    resultsPagesList = self.createPageLists(self.foundList)
    self.createPageListing(resultsPagesList)
    
  def getTerminalSize(self):

    env = os.environ
    def ioctl_GWINSZ(fd):
        try:
            import fcntl, termios, struct, os
            cr = struct.unpack('hh', fcntl.ioctl(fd, termios.TIOCGWINSZ,
        '1234'))
        except:
            return
        return cr
    cr = ioctl_GWINSZ(0) or ioctl_GWINSZ(1) or ioctl_GWINSZ(2)
    if not cr:
        try:
            fd = os.open(os.ctermid(), os.O_RDONLY)
            cr = ioctl_GWINSZ(fd)
            os.close(fd)
        except:
            pass
    if not cr:
        cr = (env.get('LINES', 25), env.get('COLUMNS', 80))

        ### Use get(key[, default]) instead of a try/catch
        #try:
        #    cr = (env['LINES'], env['COLUMNS'])
        #except:
        #    cr = (25, 80)

    self.width = int(cr[1])
    self.height = int(cr[0])
    



  def createTempFile(self,path):    #Writes and opens a temporary file with the shell code in it.
    with open(path,mode="r",encoding="utf-8") as myFile:
      content = myFile.readlines()
    
    with tempfile.NamedTemporaryFile(mode="w",delete=False) as temp:
      
      for line in content:
        temp.write(line)
      
      temp.flush()
      
      if self.os == "nt": #NT Systems - Windows
          
          os.system('start notepad.exe ' + temp.name)
          
      else: #Linux Systems
          os.system('%s %s' % (os.getenv('EDITOR'), temp.name))

  def createPageLists(self,results):
    
      #Too much data to output at once format into pages
    resultsPagesList = []

    totalResults = len(results)
    
    if totalResults > 10:

      totalPages = int(totalResults // 10)

      if (totalResults % 10) > 0:

        totalPages += 1

      
      
      for page in range(1,totalPages + 1):

        resultsList = []

        #Counter Variables for creating lists for each page
        
        endNum = (page * 10)

        startNum = (page * 10) - 10
        
        #If last page use the total pages variable as the end number
        
        if endNum > totalResults:

          endNum = totalResults

        #Create lists
          
        resultsList = results[startNum:endNum]
       
        resultsPagesList.append(resultsList)
         

    #10 or less results = one page
        
    else:
      
      endNum = totalResults

      startNum = 0

      #Create lists
        
      resultsList = results[startNum:endNum]

      resultsPagesList.append(resultsList)


    return resultsPagesList

  def searchDB(self,search):
    
    openFile  = open(self.file, "r")
    
    reader = csv.reader(openFile)
    
    #Grab the headers of the csv file and add them to a list
    rownum = 0
    for row in reader:
      if rownum == 0:
        headerList = row
        break

    self.headerList = headerList
    
    #search for a term
    
    searchTerm = search
    newRowNum = 0
    for row in reader:
      if newRowNum == 0:
        newRowNum += 1
        continue
      else:
        tempRow = row
        if searchTerm in tempRow[4]:
          self.foundList.append(tempRow)
          newRowNum +=1
          continue
        else:
          newRowNum += 1
          continue
##        
##      
##    print(self.foundList)
##    print(len(self.foundList))
##    #for each in foundList:
##      #print(each[0])
##
##    resultsPagesList = self.createPageLists(self.foundList)
##
##    for i in range(len(resultsPagesList[0])):
##      print(i + 1," -  ",resultsPagesList[0][i][2])
##
##    #with open(foundList[0][1],mode="w",encoding="utf-8") as myFile:
##    #self.createTempFile(foundList[0][1])
    openFile.close()

    

  def createPageListing(self,resultsPagesList):
    
    width  = self.width
    height = self.height

    totalResults = len(self.foundList)
      

    end = False
    print("-" * width)

    currentPage = 0
    pageNavigation = """
          ________________________________________________________________
         |                                                                |
         |  Navigation Options                                            |
         |                                                                |
         |  - Enter 'p' followed by page number (e.g. 'p4', 'p5')         |
         |  - Enter 'e' followed by the exploit number (e.g. 'e3', 'e11') |
         |  - Enter 'exit' to return to the main menu                     |
         |________________________________________________________________|
         
         """
    totalNumOfPages = len(resultsPagesList)
    print(pageNavigation)
    input("Press [enter] to continue...")
    while end == False:
      
      print("-" * width)
      print("Current page - {0}".format(currentPage + 1),end=" | ")
      print("Exploits - {0}".format(totalResults),end=" | ")
      print("Pages - {0}".format(totalNumOfPages),end="\n")
      print()
      
      for num in range(0,len(resultsPagesList[currentPage])):

        print("{0}. {1}".format((((currentPage + 1) * 10) - 10 + (num + 1)),resultsPagesList[currentPage][num][2]))
        #resultsPagesList[currentPage][num]['pagenum'] = currentPage
      print()
      print("-" * width)
      print()


      
      
      try:
        
        choice = input("Enter option: ")

        if choice == 'exit':
        
          break

        else:
          pNumber = int(choice[1:])

          ##Navigate pages
          
          
          if choice[0] == "p":

              
              if pNumber > 0 and pNumber <= totalNumOfPages:

                currentPage = int(choice[1:]) - 1
              else:
                print()
                print("Please choose a page number in range...")


          ##Navigate Exploits
          
          elif choice[0] == "e":
              exploitNumber = int(choice[1:])

              exploitMenu = """
          _______________________________
         |                               |
         |  Exploit Options              |
         |                               |
         |  1. View Full Details         |
         |  2. View Shell Code           |
         |  3. Continue                  |
         |_______________________________|
         
         """
              print(exploitMenu)

              exploitMenuChoice = 0
              while exploitMenuChoice != 3:
                  
                  if exploitNumber % 10 == 0:
                              
                              pageOfExploit = (exploitNumber // 10) - 1
                              exploitNumInList = 9
                              
                          
                  else:
                              
                      pageOfExploit = (exploitNumber // 10)
                      exploitNumInList = (exploitNumber % 10) - 1

                  print("-" * width)
            
                  exploitMenuChoice = int(input("Please choose an option: "))
                  
                  if exploitMenuChoice == 1:
                      print("\nFull Details\n")
                      for each in self.headerList:

                        print(each)
                          
                  elif exploitMenuChoice == 2:
                      try:
                    #Open the code of the exploit in a temp file
                          if exploitNumber % 10 == 0:
                              
                              pageOfExploit = (exploitNumber // 10) - 1
                              exploitNumInList = 9
                              openTempFile(resultsPagesList[pageOfExploit][exploitNumInList][1])

                          
                          else:
                              pageOfExploit = (exploitNumber // 10)
                              exploitNumInList = (exploitNumber % 10) - 1
                          
                              self.createTempFile(resultsPagesList[pageOfExploit][exploitNumInList][1])
                      except KeyError:
                          print("Code unvailable for this exploit. Refer to online site for database provider.")
                  elif choice == 3:
                      continue
                  
             
            
      except ValueError:
        print()
        print("Please enter a valid option !")
