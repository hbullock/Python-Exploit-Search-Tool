#Import the Shodan Library
from shodan import WebAPI
import time
import pickle

class ShodanDB_Search:
  """Searches the shodan database for exploits that are in shodan, msf and exploitd"""

  def __init__(self,search):
    
    #Attributes
    
    self.configFile = "config.dat"
    self.dataList = []
    self.resultsList = None
    self.API_KEY = ""
    self.loadData()
    self.API_KEY = self.dataList[0]
    self.search = search
    self.api = WebAPI(self.API_KEY)


    

##  def main(self):
##
##    

  def loadData(self):
    try:
      with open(self.configFile, mode="rb") as myFile:

        self.dataList = pickle.load(myFile)
    except:

      self.getAPI_Key()

  def getAPI_Key(self):
    
    accepted = False
    
    while accepted == False:
    
      if self.API_KEY == "":
        
        print("API Key not given - enter below!")
        print("If you have not got an API Key then visit - www.shodanhq.com")

        try:
          
          getKey = input("Enter API Key: ")
          self.API_KEY = getKey

          self.dataList.append(self.API_KEY)
          #write the data to config file for persistence
          
          with open(self.configFile, mode="wb") as myFile:
            pickle.dump(self.dataList, myFile)
            
          accepted = True
        except:
          print("Please enter a correct API Key")
    if accepted == True:

      self.API_KEY = getKey


  def searchShodan(self):
    search = self.search
    print()
    print("Please wait this may take a while..")
    
    searchResults = self.api.exploits.search(search)

    keyDataList = []
    
    dataResults = searchResults['matches']

    #Common Variables

    totalResults = int(searchResults['total'])

    print()

    print("[+] {0} exploits found!".format(str(totalResults)))

    time.sleep(2)

    keyDataList.append(totalResults)

    #Too much data to output at once format into pages
    resultsPagesList = []
    
    if totalResults > 10:

      totalPages = int(totalResults // 10)

      if (totalResults % 10) > 0:

        totalPages += 1

      
      
      for page in range(1,totalPages + 1):

        resultsList = []

        #Counter Variables for creating lists for each page
        
        endNum = (page * 10)

        startNum = (page * 10) - 10
        
        #If last page use the total pages variable as the end number
        
        if endNum > totalResults:

          endNum = totalResults

        #Create lists
          
        resultsList = dataResults[startNum:endNum]
       
        resultsPagesList.append(resultsList)
         

    #10 or less results = one page
        
    else:
      
      endNum = totalResults

      startNum = 0

      #Create lists
        
      resultsList = dataResults[startNum:endNum]

      resultsPagesList.append(resultsList)


    return resultsPagesList, keyDataList
        

if __name__ == "__main__":


  new = ShodanDB_Search("hello")
